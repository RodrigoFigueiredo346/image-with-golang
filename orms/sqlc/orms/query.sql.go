// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package orms

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  nome, cpf, email
) VALUES (
  $1, $2, $3
)
RETURNING id, nome, email, cpf
`

type CreateUserParams struct {
	Nome  string
	Cpf   sql.NullString
	Email sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Nome, arg.Cpf, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Email,
		&i.Cpf,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, nome, email, cpf FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Email,
		&i.Cpf,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, nome, email, cpf FROM users
ORDER BY ID
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Email,
			&i.Cpf,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
  set nome = $2,
  email = $3
WHERE id = $1
RETURNING id, nome, email, cpf
`

type UpdateUserParams struct {
	ID    int64
	Nome  string
	Email sql.NullString
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.ID, arg.Nome, arg.Email)
	return err
}
